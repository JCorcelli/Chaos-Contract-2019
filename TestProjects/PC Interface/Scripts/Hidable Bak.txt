using UnityEngine;
using System.Collections;
using SelectionSystem;
using CameraSystem;

namespace NPCSystem
{
	public class Hidable : AbstractAnyHandler {

		public GameObject hiddenObject;
		public GameObject ghost;
		public BunnyThirdPerson bunny;
		public bool touchingCover = false;
		public HidingSpot hidingSpot;
		public HidingSpot _hidingSpot;
		public string requireGroup = "";
		public string coverGroup = "";
		public Collider lastCover;
		public Collider touchingCollider;
		public bool hidden = false;
		public int count = 0;
		public bool diving = false;
		
		
		public Transform targetB {
			
			get{return CameraHolder.instance.targetB;}
		}
		
		protected override void OnEnable()
		
		{
			base.OnEnable();
			bunny = hiddenObject.GetComponent<BunnyThirdPerson>();
			
			ghost.SetActive(false);
		}
		protected override void OnPress()
		{
			if (hidden && Input.GetButtonDown("mouse 1"))
			{
				transform.position = targetB.position;
				
				moved = true;
			}
			else if (Input.GetButtonDown("use")) 	
			{
				bunny.rigidbody.velocity = Vector3.zero;
				Hide();
			}
			else if (hidden && Input.GetButtonDown("shift")) 	
			{
				diving = true;
				Hide();
				
				diving = false;
			}
		}
		
		protected override void OnHold()
		{
			if (hidden && Input.GetButton("mouse 1"))
			{
				
				transform.position = targetB.position;
				
				moved = true;
			}
			
		}
		public bool moved = false;
		
		protected override void OnLateUpdate(){
			base.OnLateUpdate();
			if (hidden)
			{
				StayInZone();
				if (touchingCover )
				{
					// if it didn't move it's always good
					if (!moved)
						ghost.transform.position = transform.position;
				}
				else
					// on frames we're out of cover, it gets moved back
					ghost.transform.position = transform.position;
				
					
			}
			moved = false;
		}
		protected void StayInZone() {
			if (lastCover == null || (touchingCover && requireGroup == coverGroup)) return;
			
			Vector3 closestPoint = lastCover.ClosestPointOnBounds(transform.position );
			
			transform.position = closestPoint;
			
		}
		protected void Hide()
		{
			if ( touchingCover )
			{
				if (!hidden)
				{
					hidden = true;
					
					hiddenObject.SetActive(false);
					
					
					if (_hidingSpot != null) 
						_hidingSpot.Hide();
					
					
					ghost.SetActive(true);
					
					hidingSpot = _hidingSpot;
					requireGroup = coverGroup;
					
					
					lastCover = touchingCollider;
					
				}
				else if (coverGroup == requireGroup)
				{
					hidden = false;
					hiddenObject.transform.position = ghost.transform.position;
					transform.localPosition = Vector3.zero;
					hiddenObject.SetActive(true);
					if (hidingSpot != null) 
					{
						hidingSpot.Show();
						
					}
					ghost.SetActive(false);
					
					if (diving)
					{
						 
						bunny.jumping = false;
						bunny.touchingGround = true;
						bunny.diving = true;
					}
					StopCoroutine("NoReenter");
					StartCoroutine("NoReenter");
				}
			}
			
		}
		
		protected bool noEnter = false;
		protected IEnumerator NoReenter()
		{
			noEnter = true;
			yield return new WaitForSeconds(1f);
			noEnter = false;
		}
		protected void OnTriggerEnter(Collider col)
		{
			
			HidingSpot hs = col.GetComponent<HidingSpot>();
			
			if (hs != null) 
			{
				_hidingSpot = hs;
				touchingCover = true;
				coverGroup = _hidingSpot.group;
				
				touchingCollider = col;
				if (requireGroup == coverGroup)
				{
					
					if (hidden) 
					{
						hidingSpot.Show();
						_hidingSpot.Hide();
						
					}
					
					hidingSpot = _hidingSpot;
					lastCover = touchingCollider;
				}
				count ++;
				
				if (!noEnter && !hidden && bunny.jumping) Hide();
			}
		}
		protected void OnTriggerExit(Collider col)
		{
			
			HidingSpot hidingSpot = col.GetComponent<HidingSpot>();
			
			if (hidingSpot != null) 
			{
				count --;
				if (count <= 0)
				{
					touchingCover = false;
					
				}
			}
			
			
		}
	}
}